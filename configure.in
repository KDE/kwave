dnl without this order in this file, autoconf will not work!
dnl the argument is a source file out of your sources. But
dnl acinclude.m4 makes the job for all programs ;-)

AC_INIT(admin/acinclude.m4.in)
AC_CONFIG_AUX_DIR(admin)

AC_CANONICAL_SYSTEM  
AC_ARG_PROGRAM
AM_INIT_AUTOMAKE(kwave,0.6.0)
AC_LIBTOOL_DLOPEN
KDE_PROG_LIBTOOL
KDE_SET_PREFIX
AM_CONFIG_HEADER(config.h)
AM_ENABLE_SHARED(yes)
AM_ENABLE_STATIC(yes)

dnl CXXFLAGS="$(CXXFLAGS) -fno-check-new"
dnl CFLAGS="${CFLAGS}     -g -Wall -pedantic --no-rtti ${RPM_OPT_FLAGS}"
dnl CXXFLAGS="${CXXFLAGS} -g -Wall -pedantic --no-rtti ${RPM_OPT_FLAGS}"
dnl CFLAGS="${CFLAGS}     -O2 -Wall -pedantic ${RPM_OPT_FLAGS}"
dnl CXXFLAGS="${CXXFLAGS} -O2 -Wall -pedantic ${RPM_OPT_FLAGS}"
dnl CXXFLAGS="$(CXXFLAGS) -fexceptions -g"
dnl 
dnl AC_DEFUN(AC_CHECK_WITH_INSURE,
dnl [
dnl     ac_use_insure=no
dnl     AC_MSG_CHECKING(whether to use insure++);
dnl 
dnl     AC_ARG_ENABLE(insure, 
dnl [  --enable-insure         enable support for insure++ debugging [default=no]],
dnl    [ 
dnl     if test $enableval = "no"; then 
dnl          ac_use_insure="no"
dnl        else 
dnl          ac_use_insure="yes"
dnl     fi
dnl    ], [ac_use_insure="no"])
dnl 
dnl  if test "$ac_use_insure" = "yes"; then
dnl    CC=insure
dnl    CPP=insure
dnl    CXX=insure
dnl    AC_SUBST(CC)
dnl    AC_SUBST(CPP)
dnl    AC_SUBST(CXX)
dnl  fi
dnl 
dnl  AC_MSG_RESULT($ac_use_insure);
dnl ])
dnl 
dnl test for usage of insure++
dnl AC_CHECK_WITH_INSURE

AC_CHECK_COMPILERS
dnl AC_PROG_CC
dnl AC_PROG_CPP
dnl AC_PROG_CXX

dnl switch to C++
AC_LANG_CPLUSPLUS

dnl check if nls is wanted
AM_KDE_WITH_NLS(yes)

AC_PATH_KDE
AC_ARG_PROGRAM

dnl Checks for programs.
AC_PROG_INSTALL
AC_PROG_LN_S

dnl checks, if the debug code is wanted
dnl ### AC_CHECK_FLAGS
dnl 
dnl optimization flags for athlon
dnl CFLAGS = -O3 -fomit-frame-pointer -Wall 
dnl -mathlon -mcpu=athlon -march=athlon
dnl -malign-functions=4 -funroll-loops -fexpensive-optimizations 
dnl -malign-double -fschedule-insns2 -mwide-multiply
dnl 
dnl optimization flags for pentium pro
dnl CFLAGS = -s -O3 -fomit-frame-pointer -Wall 
dnl -mpentiumpro -march=pentiumpro
dnl -malign-functions=4 -funroll-loops -fexpensive-optimizations 
dnl -malign-double -fschedule-insns2 -mwide-multiply
dnl 
dnl ### CFLAGS="${CFLAGS} --no-rtti ${RPM_OPT_FLAGS}"
dnl ### CXXFLAGS="${CXXFLAGS} --no-rtti ${RPM_OPT_FLAGS}"
dnl 
dnl now create our libtool, the earlier the better...
dnl AM_PROG_LIBTOOL
dnl 
dnl find out some variables 
dnl ### AC_AIX
dnl ### AC_MINIX
dnl 
dnl for NLS support. Call them in this order!

dnl check if the c++ compiler is new enough to support references to functions
AC_LANG_CPLUSPLUS dnl switch to C++
AC_MSG_CHECKING("whether $CXX supports references to functions")
AC_TRY_LINK(
#include <sys/resource.h>
,
    typedef int(function_t)(int);
    class dummy {
    public:
        function_t &function(int index);
    };
,
AC_MSG_RESULT("yes")
,AC_MSG_ERROR(FAILED! please get a newer C++ compiler))

AC_TYPE_SIZE_T
AC_CHECK_SIZEOF(char,1)
AC_CHECK_SIZEOF(short,2)
AC_CHECK_SIZEOF(int,4)
if test $ac_cv_sizeof_char != 1 ; then
	AC_MSG_WARN([******************************************************************])
	AC_MSG_WARN([*** sizeof (char) != 1.                                            ])
	AC_MSG_WARN([******************************************************************])
	fi
if test $ac_cv_sizeof_short != 2 ; then
	AC_MSG_WARN([******************************************************************])
	AC_MSG_WARN([*** sizeof (short) != 2.                                          ])
	AC_MSG_WARN([******************************************************************])
	fi
if test $ac_cv_sizeof_int != 4 ; then
	AC_MSG_WARN([******************************************************************])
	AC_MSG_WARN([*** sizeof (int) != 4.                                            ])
	AC_MSG_WARN([******************************************************************])
	fi

dnl check for dirent.h
AC_HEADER_DIRENT

dnl check for other stdc headers. More traditional ;)
AC_HEADER_STDC
dnl check for some more header files. You can remove some of
dnl them, if you want to. But it doesn't hurt
dnl AC_CHECK_HEADERS(fcntl.h sys/time.h unistd.h sys/cdefs.h)
dnl AC_CHECK_HEADERS(fnmatch.h sysent.h strings.h sys/stat.h)
dnl AC_CHECK_HEADERS(linux/soundcard.h)

dnl name mangling would be fine, but not necessary
AC_CHECK_HEADER(demangle.h)

dnl rtti/type info woulf be fine for debugging
AC_CHECK_HEADERS(typeinfo)

dnl check for multithreading support
AC_CHECK_HEADER(pthread.h,,AC_MSG_ERROR(""
"    "
"    your system lacks support for posix threads."
"    please install a current version of gnu libc !"
"    "))

AC_CHECK_HEADERS(utility string,,AC_MSG_ERROR(""
"    "
"    your system seems to lack support for one or more STL classes."
"    please install a current version of the libgpp package"
"    that contains the necessary C++ header files!"
"    "))

AC_CHECK_HEADERS( assert.h byteswap.h ctype.h dlfcn.h endian.h errno.h \
	fcntl.h features.h float.h limits.h sched.h stdarg.h stddef.h \
	stdio.h stdlib.h string.h sys/ioctl.h sys/param.h limits.h \
	sys/time.h sys/types.h time.h unistd.h,,AC_MSG_ERROR(""
"    "
"    your system seems to lack one or more needed header files."
"    please make sure you have all necessary developer packages"
"    installed or that the header files are present on your system!"
"    "))

dnl Check for memory info and see if we can determine
dnl the total amount of installed memory
AC_MSG_CHECKING("for memory info")
AC_TRY_LINK(
#include <sys/sysinfo.h>
#include <linux/kernel.h>
,
    struct sysinfo info;
    unsigned int total;
    sysinfo(&info);
    total = info.totalram;
,
AC_DEFINE(HAVE_MEMINFO)
AC_MSG_RESULT("present")
,AC_MSG_WARN(FAILED!

!!! You might get inaccurate behaviour of the memory management !!!

))

dnl check for resource query functions
AC_MSG_CHECKING("for resource usage")
AC_TRY_LINK(
#include <sys/resource.h>
,
    struct rlimit limit;
    getrlimit(RLIMIT_DATA, &limit);
    unsigned int ulimit = limit.rlim_cur >> 20;
    getrlimit(RLIMIT_AS, &limit);
,
AC_DEFINE(HAVE_GETRLIMIT)
AC_MSG_RESULT("present")
,AC_MSG_WARN(MISSING!))

AC_CHECK_FUNC(geteuid, AC_DEFINE(HAVE_GETEUID))
AC_CHECK_FUNC(mkstemp, AC_DEFINE(HAVE_MKSTEMP))
AC_CHECK_FUNC(unlink,  AC_DEFINE(HAVE_UNLINK))

dnl Checks for libraries.
dnl AC_CHECK_LIB(socket, socket, [LIBSOCKET="-lsocket -lnsl"]) dnl for Solaris' X11
dnl AC_SUBST(LIBSOCKET)

AC_CHECK_LIB(compat, main, [LIBCOMPAT="-lcompat"]) dnl for FreeBSD
AC_SUBST(LIBCOMPAT)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_HEADER_TIME

dnl check if the compiler has bool
AC_CHECK_BOOL
dnl check if the system needs some #defines
AC_CHECK_GNU_EXTENSIONS

dnl Checks for library functions. 
dnl AC_CHECK_FUNCS(socket vsnprintf)
dnl AC_CHECK_SETENV
dnl AC_CHECK_FUNCS(getdomainname)
dnl AC_CHECK_KSIZE_T

dnl **********************************
dnl *** include special CSL macros ***
dnl **********************************
builtin(include, admin/ac_csl.m4)dnl

dnl Foreign defaults:
MC_IF_VAR_EQ(enable_static, yes, , enable_static=no)
MC_IF_VAR_EQ(enable_shared, no, , enable_shared=yes)

dnl
dnl Define package requirements.
dnl
AC_DEFUN(AC_REQUIRE_ARTS,
[
    CFLAGS="$CFLAGS -DG_DISABLE_DEPRECATED"

    dnl Need pkg-config first
    AC_PATH_PROG(ARTSC_CONFIG, artsc-config, no)
    if test x$ARTSC_CONFIG = xno ; then
      AC_MSG_ERROR(Cannot find artsc-config - missing from path?)
    fi

    dnl Check for proper Arts version and retrive paths
    REQUIRED=0.9.5
    AC_MSG_CHECKING(for ARTS - version >= $REQUIRED)
    ARTS_VERSION=[`$ARTSC_CONFIG --version | sed s/^[^0-9]*//g `]
    MC_CHECK_VERSION($ARTS_VERSION, $REQUIRED,
      AC_MSG_RESULT([yes ($ARTS_VERSION)])
      ,
      AC_MSG_RESULT(no)
      AC_MSG_ERROR(CSL requires at least ARTS v$REQUIRED)
    )

    dnl setup variables
    AC_MSG_CHECKING(for ARTS base directory)
    if ! $ARTSC_CONFIG --arts-prefix >/dev/null; then
      ARTSDIR=[`kde-config --prefix`]
      AC_MSG_RESULT(artsc-config is too old - guessing: $ARTSDIR)
    else
      ARTSDIR=[`$ARTSC_CONFIG --arts-prefix`]
      AC_MSG_RESULT($ARTSDIR)
    fi
    ARTS_CFLAGS="`$ARTSC_CONFIG --cflags`"
    ARTS_LIBS="`$ARTSC_CONFIG --libs`"

    AC_SUBST(ARTSDIR)
    AC_SUBST(ARTS_CFLAGS)
    AC_SUBST(ARTS_LIBS)
])

# need aRts
AC_REQUIRE_ARTS
CFLAGS="$CFLAGS `$ARTSC_CONFIG --cflags`"
LDLAGS="$LDLAGS `$ARTSC_CONFIG --libs`"

#####################################
###########   CSL END    ############
#####################################

dnl output files
topdir=`pwd`
AC_SUBST(topdir)

dnl get the fields of the spec file from the lsm file

define(getlsm, $1=`bin/get_lsm_entry.sh kwave.lsm $2`)

getlsm(RPM_DESCRIPTION, Description)
getlsm(RPM_SUMMARY, Keywords)
getlsm(RPM_NAME, Title)
getlsm(RPM_COPYRIGHT, Copying-policy)
getlsm(RPM_URL, Homepage)
dnl getlsm(RPM_VENDOR, Author)
RPM_VENDOR="Thomas Eschenbacher <Thomas.Eschenbacher@gmx.de>"

changequote(<<, >>)
RPM_VERSION=`cat ./VERSION | awk '{ split($0, a, "-") } END { print a[1] }'`
RPM_RELEASE=`cat ./VERSION | awk '{ split($0, a, "-") } END { print a[2]+0 }'`
RPM_GROUP=<<X11/Applications/Sound>>
RPM_BUILDROOT=<</tmp/kwave-%{version}.root>>
LD_VERSION_INFO=<<`cat ./VERSION | awk '{split($0, a, ".")} \
	{relpos=index(a[3],"-")} \
	{rel=relpos==0 ? a[3] : substr(a[3], 1, relpos-1)} \
END	{printf("%d:%d:%d", a[1]+a[2], rel, a[2]) }'`>>
changequote([, ])

dnl enter the variables for the spec file
AC_SUBST(RPM_DESCRIPTION)
AC_SUBST(RPM_SUMMARY)
AC_SUBST(RPM_NAME)
AC_SUBST(RPM_VERSION)
AC_SUBST(RPM_RELEASE)
AC_SUBST(RPM_GROUP)
AC_SUBST(RPM_COPYRIGHT)
AC_SUBST(RPM_URL)
AC_SUBST(RPM_VENDOR)
AC_SUBST(RPM_BUILDROOT)
AC_SUBST(LD_VERSION_INFO)

dnl add here all your Makefiles
dnl      (Makefile mt/Makefile libkwave/Makefile libgui/Makefile kwave/Makefile plugins/Makefile plugins/template/Makefile po/Makefile doxy.cfg doc/Makefile kwave.spec)
AC_OUTPUT(Makefile mt/Makefile libkwave/Makefile libgui/Makefile kwave/Makefile plugins/Makefile plugins/template/Makefile po/Makefile doxy.cfg doc/Makefile kwave.spec)
