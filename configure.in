dnl without this order in this file, autoconf will not work!
dnl the argument is a source file out of your sources. But
dnl acinclude.m4 makes the job for all programs ;-)

AC_INIT(acinclude.m4)

AC_CONFIG_AUX_DIR(admin)

AC_CANONICAL_SYSTEM  
AC_ARG_PROGRAM

dnl You have to change this
AM_INIT_AUTOMAKE(kwave,0.6.0)

KDE_SET_PREFIX
dnl generate the config header
AM_CONFIG_HEADER(config.h) dnl at the distribution this done

AM_ENABLE_SHARED(yes)
AM_ENABLE_STATIC(yes)

dnl CFLAGS="${CFLAGS}     -g -Wall -pedantic --no-rtti ${RPM_OPT_FLAGS}"
dnl CXXFLAGS="${CXXFLAGS} -g -Wall -pedantic --no-rtti ${RPM_OPT_FLAGS}"
dnl CFLAGS="${CFLAGS}     -O2 -Wall -pedantic ${RPM_OPT_FLAGS}"
dnl CXXFLAGS="${CXXFLAGS} -O2 -Wall -pedantic ${RPM_OPT_FLAGS}"

dnl test for usage of insure++
AC_CHECK_WITH_INSURE

AC_CHECK_COMPILERS
dnl AC_PROG_CC
dnl AC_PROG_CPP
dnl AC_PROG_CXX

AC_LIBTOOL_DLOPEN
KDE_PROG_LIBTOOL

dnl check if nls is wanted
AM_KDE_WITH_NLS(yes)

AC_PATH_KDE
AC_ARG_PROGRAM

dnl make $KDEDIR the default for the installation
dnl AC_PREFIX_DEFAULT(${KDEDIR:-/usr})

dnl Checks for programs.
AC_PROG_INSTALL
AC_PROG_LN_S

dnl checks, if the debug code is wanted
dnl ### AC_CHECK_FLAGS

dnl optimization flags for athlon
dnl CFLAGS = -O3 -fomit-frame-pointer -Wall 
dnl -mathlon -mcpu=athlon -march=athlon
dnl -malign-functions=4 -funroll-loops -fexpensive-optimizations 
dnl -malign-double -fschedule-insns2 -mwide-multiply

dnl optimization flags for pentium pro
dnl CFLAGS = -s -O3 -fomit-frame-pointer -Wall 
dnl -mpentiumpro -march=pentiumpro
dnl -malign-functions=4 -funroll-loops -fexpensive-optimizations 
dnl -malign-double -fschedule-insns2 -mwide-multiply

dnl ### CFLAGS="${CFLAGS} --no-rtti ${RPM_OPT_FLAGS}"
dnl ### CXXFLAGS="${CXXFLAGS} --no-rtti ${RPM_OPT_FLAGS}"

dnl now create our libtool, the earlier the better...
dnl AM_PROG_LIBTOOL

dnl find out some variables 
dnl ### AC_AIX
dnl ### AC_MINIX

dnl for NLS support. Call them in this order!
dnl ### AC_LANG_CPLUSPLUS dnl switch to C++

AC_TYPE_SIZE_T
AC_CHECK_SIZEOF(char,1)
AC_CHECK_SIZEOF(short,2)
AC_CHECK_SIZEOF(int,4)
if test $ac_cv_sizeof_char != 1 ; then
	AC_MSG_WARN([******************************************************************])
	AC_MSG_WARN([*** sizeof (char) != 1.                                            ])
	AC_MSG_WARN([******************************************************************])
	fi
if test $ac_cv_sizeof_short != 2 ; then
	AC_MSG_WARN([******************************************************************])
	AC_MSG_WARN([*** sizeof (short) != 2.                                          ])
	AC_MSG_WARN([******************************************************************])
	fi
if test $ac_cv_sizeof_int != 4 ; then
	AC_MSG_WARN([******************************************************************])
	AC_MSG_WARN([*** sizeof (int) != 4.                                            ])
	AC_MSG_WARN([******************************************************************])
	fi

dnl switch to C++
AC_LANG_CPLUSPLUS

dnl check for dirent.h
AC_HEADER_DIRENT

dnl check for other stdc headers. More traditional ;)
AC_HEADER_STDC
dnl check for some more header files. You can remove some of
dnl them, if you want to. But it doesn't hurt
dnl AC_CHECK_HEADERS(fcntl.h sys/time.h unistd.h sys/cdefs.h)
dnl AC_CHECK_HEADERS(fnmatch.h sysent.h strings.h sys/stat.h)
dnl AC_CHECK_HEADERS(linux/soundcard.h)

dnl name mangling would be fine, but not necessary
AC_CHECK_HEADER(demangle.h)

dnl check for multithreading support
AC_CHECK_HEADER(pthread.h,,AC_MSG_ERROR(""
"    "
"    your system lacks support for posix threads."
"    please install a current version of gnu libc !"
"    "))

AC_CHECK_HEADERS(utility string,,AC_MSG_ERROR(""
"    "
"    your system seems to lack support for one or more STL classes."
"    please install a current version of the libgpp package"
"    that contains the necessary C++ header files!"
"    "))

AC_CHECK_HEADERS( assert.h byteswap.h ctype.h dlfcn.h endian.h errno.h \
	fcntl.h features.h float.h limits.h sched.h stdarg.h stddef.h \
	stdio.h stdlib.h string.h sys/ioctl.h sys/param.h limits.h \
	sys/time.h sys/types.h time.h unistd.h,,AC_MSG_ERROR(""
"    "
"    your system seems to lack one or more needed header files."
"    please make sure you have all necessary developer packages"
"    installed or that the header files are present on your system!"
"    "))

dnl Checks for libraries.
dnl AC_CHECK_LIB(socket, socket, [LIBSOCKET="-lsocket -lnsl"]) dnl for Solaris' X11
dnl AC_SUBST(LIBSOCKET)

dnl check X, Qt and KDE
dnl ### AC_PATH_KDE

AC_CHECK_LIB(compat, main, [LIBCOMPAT="-lcompat"]) dnl for FreeBSD
AC_SUBST(LIBCOMPAT)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_HEADER_TIME

dnl check if the compiler has bool
AC_CHECK_BOOL
dnl check if the system needs some #defines
AC_CHECK_GNU_EXTENSIONS

dnl Checks for library functions. 
dnl AC_CHECK_FUNCS(socket vsnprintf)
AC_CHECK_SETENV
dnl AC_CHECK_FUNCS(getdomainname)
AC_CHECK_KSIZE_T

dnl **********************************
dnl *** include special CSL macros ***
dnl **********************************
builtin(include, admin/ac_csl.m4)dnl
#
# Configure script for CSL
#
#AC_INIT(adapter/adapter_impl.h)
#AM_CONFIG_HEADER(CSL_config.h)
#AC_PREREQ(2.13)
#
#
# CSL version numbers
#
#AC_DIVERT_PUSH(AC_DIVERSION_NOTICE)dnl
#CSL_MAJOR_VERSION=0
#CSL_MINOR_VERSION=1
#CSL_MICRO_VERSION=1
#CSL_INTERFACE_AGE=0
#CSL_BINARY_AGE=0
#CSL_VERSION=$CSL_MAJOR_VERSION.$CSL_MINOR_VERSION.$CSL_MICRO_VERSION
#AC_DIVERT_POP()dnl
#dnl#
#dnl# Making releases:
#dnl#   CSL_MICRO_VERSION += 1;
#dnl#   CSL_INTERFACE_AGE += 1;
#dnl#   CSL_BINARY_AGE += 1;
#dnl# if any functions have been added, set CSL_INTERFACE_AGE to 0.
#dnl# if backwards compatibility has been broken,
#dnl# set CSL_BINARY_AGE _and_ CSL_INTERFACE_AGE to 0.
#dnl#
# CSL version numbers
#AC_SUBST(CSL_MAJOR_VERSION)
#AC_SUBST(CSL_MINOR_VERSION)
#AC_SUBST(CSL_MICRO_VERSION)
#AC_SUBST(CSL_INTERFACE_AGE)
#AC_SUBST(CSL_BINARY_AGE)
#AC_SUBST(CSL_VERSION)
#
# compute libtool versions
#LT_RELEASE=$CSL_MAJOR_VERSION.$CSL_MINOR_VERSION
#LT_CURRENT=`expr $CSL_MICRO_VERSION - $CSL_INTERFACE_AGE`
#LT_REVISION=$CSL_INTERFACE_AGE
#LT_AGE=`expr $CSL_BINARY_AGE - $CSL_INTERFACE_AGE`
#AC_SUBST(LT_RELEASE)
#AC_SUBST(LT_CURRENT)
#AC_SUBST(LT_REVISION)
#AC_SUBST(LT_AGE)
#
# Support program name conversion.
#AC_ARG_PROGRAM
#
# Disable automatic maintainer mode.
#AM_MAINTAINER_MODE
#
# We have subdirectories.
#AC_PROG_MAKE_SET
#
# Make sure else configure stuff exists.
#AC_CANONICAL_HOST


dnl Foreign defaults:
MC_IF_VAR_EQ(enable_static, yes, , enable_static=no)
MC_IF_VAR_EQ(enable_shared, no, , enable_shared=yes)

dnl
dnl Define package requirements.
dnl
AC_DEFUN(AC_REQUIRE_ARTS,
[
    CFLAGS="$CFLAGS -DG_DISABLE_DEPRECATED"

    dnl Need pkg-config first
    AC_PATH_PROG(ARTSC_CONFIG, artsc-config, no)
    if test x$ARTSC_CONFIG = xno ; then
      AC_MSG_ERROR(Cannot find artsc-config - missing from path?)
    fi

    dnl Check for proper Arts version and retrive paths
    REQUIRED=0.5.2
    AC_MSG_CHECKING(for ARTS - version >= $REQUIRED)
    ARTS_VERSION=[`$ARTSC_CONFIG --version | sed s/^[^0-9]*//g `]
    MC_CHECK_VERSION($ARTS_VERSION, $REQUIRED,
      AC_MSG_RESULT([yes ($ARTS_VERSION)])
      ,
      AC_MSG_RESULT(no)
      AC_MSG_ERROR(CSL requires at least ARTS v$REQUIRED)
    )

    dnl setup variables
    dnl ARTSDIR=[`$ARTSC_CONFIG --arts-prefix`]
    ARTS_CFLAGS="-I$ARTSDIR/include/arts"
    dnl ARTS_LIBS="-L$ARTSDIR/lib -lmcop"
    ARTS_LIBS="`$ARTSC_CONFIG --libs`"

    AC_SUBST(ARTSDIR)
    AC_SUBST(ARTS_CFLAGS)
    AC_SUBST(ARTS_LIBS)
])

# need aRts
AC_REQUIRE_ARTS
CFLAGS="$CFLAGS `$ARTSC_CONFIG --cflags`"
LDLAGS="$LDLAGS `$ARTSC_CONFIG --libs`"

# architecture information
# AC_DEFINE_UNQUOTED(CSL_ARCH_NAME, "${host_alias}")
#
# check for bytesex stuff and export it
#AC_C_BIGENDIAN
#case xyes in
#  x$ac_cv_c_bigendian)
#    CSL_BYTE_ORDER=CSL_BIG_ENDIAN
#    ;;
#  *)
#    CSL_BYTE_ORDER=CSL_LITTLE_ENDIAN
#    ;;
#esac
#AC_SUBST(CSL_BYTE_ORDER)

#####################################
###########   CSL END    ############
#####################################

dnl output files
topdir=`pwd`
AC_SUBST(topdir)

dnl get the fields of the spec file from the lsm file

define(getlsm, $1=`bin/get_lsm_entry.sh kwave.lsm $2`)

getlsm(RPM_DESCRIPTION, Description)
getlsm(RPM_SUMMARY, Keywords)
getlsm(RPM_NAME, Title)
getlsm(RPM_COPYRIGHT, Copying-policy)
getlsm(RPM_URL, Homepage)
dnl getlsm(RPM_VENDOR, Author)
RPM_VENDOR="Thomas Eschenbacher <Thomas.Eschenbacher@gmx.de>"

changequote(<<, >>)
RPM_VERSION=`cat ./VERSION | awk '{ split($0, a, "-") } END { print a[1] }'`
RPM_RELEASE=`cat ./VERSION | awk '{ split($0, a, "-") } END { print a[2]+0 }'`
RPM_GROUP=<<X11/Applications/Sound>>
RPM_BUILDROOT=<</tmp/kwave-%{version}.root>>
LD_VERSION_INFO=<<`cat ./VERSION | awk '{split($0, a, ".")} \
	{relpos=index(a[3],"-")} \
	{rel=relpos==0 ? a[3] : substr(a[3], 1, relpos-1)} \
END	{printf("%d:%d:%d", a[1]+a[2], rel, a[2]) }'`>>
changequote([, ])

dnl enter the variables for the spec file
AC_SUBST(RPM_DESCRIPTION)
AC_SUBST(RPM_SUMMARY)
AC_SUBST(RPM_NAME)
AC_SUBST(RPM_VERSION)
AC_SUBST(RPM_RELEASE)
AC_SUBST(RPM_GROUP)
AC_SUBST(RPM_COPYRIGHT)
AC_SUBST(RPM_URL)
AC_SUBST(RPM_VENDOR)
AC_SUBST(RPM_BUILDROOT)
AC_SUBST(LD_VERSION_INFO)

dnl add here all your Makefiles
dnl      (Makefile mt/Makefile libkwave/Makefile libgui/Makefile kwave/Makefile plugins/Makefile plugins/template/Makefile po/Makefile doxy.cfg doc/Makefile kwave.spec)
AC_OUTPUT(Makefile kwave/Makefile kwave/docs/Makefile kwave/docs/en/Makefile po/Makefile kwave/Makefile libgui/Makefile bin/Makefile plugins/dialogs/sonagram/Makefile plugins/dialogs/Makefile plugins/Makefile plugins/dialogs/playback/Makefile mt/Makefile plugins/about/Makefile kwave/toolbar/Makefile doc/Makefile libkwave/src/Makefile libkwave/Makefile libkwave/Makefile plugins/sonagram/Makefile kwave/libgui/Makefile plugins/playback/Makefile kwave/pics/Makefile plugins/zero/Makefile plugins/memory/Makefile )
