dnl without this order in this file, autoconf will not work!
dnl the argument is a source file out of your sources. But
dnl acinclude.m4 makes the job for all programs ;-)

AC_INIT(admin/acinclude.m4.in)
AC_CONFIG_AUX_DIR(admin)

dnl This ksh/zsh feature conflicts with `cd blah ; pwd`
unset CDPATH

dnl Checking host/target/build systems, for make, install etc.
AC_CANONICAL_SYSTEM
dnl Perform program name transformation
AC_ARG_PROGRAM

dnl Automake doc recommends to do this only here. (Janos)
AM_INIT_AUTOMAKE(kwave,0.6.4)

KDE_SET_PREFIX

dnl generate the config header
AM_CONFIG_HEADER(config.h)

dnl Check for programs.
AC_CHECK_COMPILERS
dnl AC_LANG_CPLUSPLUS
AM_ENABLE_SHARED(yes)
AM_ENABLE_STATIC(no)

AC_LIBTOOL_DLOPEN
KDE_PROG_LIBTOOL

dnl Checks for some programs/tools
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PATH_PROG(CONVERT,convert)
AC_PATH_PROG(MSGMERGE, msgmerge)
AC_PATH_PROG(MSGFMT, msgfmt)
AC_PATH_PROG(XGETTEXT, xgettext)
AC_PATH_PROG(RECODE, recode)
AC_PATH_PROG(SED, sed)
AC_PATH_PROG(EXPAND, expand)
AC_PATH_PROG(CAT, cat)
AC_PATH_PROG(SORT, sort)
AC_PATH_PROG(UNIQ, uniq)
AC_PATH_PROG(FIND, find)

dnl CXXFLAGS="$(CXXFLAGS) -fno-check-new"
dnl CFLAGS="${CFLAGS}     -g -Wall -pedantic --no-rtti ${RPM_OPT_FLAGS}"
dnl CXXFLAGS="${CXXFLAGS} -g -Wall -pedantic --no-rtti ${RPM_OPT_FLAGS}"
dnl CFLAGS="${CFLAGS}     -O2 -Wall -pedantic ${RPM_OPT_FLAGS}"
dnl CXXFLAGS="${CXXFLAGS} -O2 -Wall -pedantic ${RPM_OPT_FLAGS}"
dnl CXXFLAGS="$(CXXFLAGS) -fexceptions -g"
dnl
dnl AC_DEFUN(AC_CHECK_WITH_INSURE,
dnl [
dnl     ac_use_insure=no
dnl     AC_MSG_CHECKING(whether to use insure++);
dnl
dnl     AC_ARG_ENABLE(insure,
dnl [  --enable-insure         enable support for insure++ debugging [default=no]],
dnl    [
dnl     if test $enableval = "no"; then
dnl          ac_use_insure="no"
dnl        else
dnl          ac_use_insure="yes"
dnl     fi
dnl    ], [ac_use_insure="no"])
dnl
dnl  if test "$ac_use_insure" = "yes"; then
dnl    CC=insure
dnl    CPP=insure
dnl    CXX=insure
dnl    AC_SUBST(CC)
dnl    AC_SUBST(CPP)
dnl    AC_SUBST(CXX)
dnl  fi
dnl
dnl  AC_MSG_RESULT($ac_use_insure);
dnl ])
dnl
dnl test for usage of insure++
dnl AC_CHECK_WITH_INSURE

KDEMAJOR=`$CAT ./KDE-VERSION`
AC_MSG_CHECKING(which KDE/Qt to use)
if test "$KDEMAJOR" = "2"; then {
    AC_MSG_RESULT([KDE 2.x / Qt 2.1])
    KDE_USE_QT(2.1)
    KDE_VERSION_SPECIFIC_LIBS="-lartsc -lartsflow -lartsflow_idl -lmcop \
                               -lkfile -lkdeui -lkdecore -lqt"
} else {
    if test "$KDEMAJOR" = "3"; then {
        AC_MSG_RESULT([KDE 3.x / Qt 3.1])
        KDE_USE_QT(3.0.1)
        KDE_VERSION_SPECIFIC_LIBS="-lartsc -lartsflow_idl -lartsflow -lmcop \
                                   -lkio -lkdeui -lkdecore -lqt-mt"
    } else {
        AC_MSG_RESULT(unknown ?)
        AC_MSG_ERROR([ unable to determine KDE/Qt versions ])
    } fi
} fi
AC_SUBST(KDE_VERSION_SPECIFIC_LIBS)

AC_PATH_KDE

KDE_FIND_PATH(xml2pot, XML2POT, [$kde_default_bindirs], [KDE_MISSING_PROG_ERROR(xml2pot)])
AC_SUBST(XML2POT)

KDE_FIND_PATH(checkXML, CHECKXML, [$kde_default_bindirs], [KDE_MISSING_PROG_ERROR(checkXML)])
AC_SUBST(CHECKXML)

KDE_FIND_PATH(po2xml, PO2XML, [$kde_default_bindirs], [KDE_MISSING_PROG_ERROR(po2xml)])
AC_SUBST(PO2XML)

KDE_FIND_PATH(meinproc, MEINPROC, [$kde_default_bindirs], [KDE_MISSING_PROG_ERROR(meinproc)])
AC_SUBST(MEINPROC)

dnl check for the file with KDE's built-in translations
AC_MSG_CHECKING(for kde.pot)
eval "KDE_POT_FILE=\"`echo ${includedir}/kde.pot`\""
AC_SUBST(KDE_POT_FILE)
AC_MSG_RESULT(${KDE_POT_FILE})

dnl checks, if the debug code is wanted
dnl ### AC_CHECK_FLAGS
dnl
dnl optimization flags for athlon
dnl CFLAGS = -O3 -fomit-frame-pointer -Wall
dnl -mathlon -mcpu=athlon -march=athlon
dnl -malign-functions=4 -funroll-loops -fexpensive-optimizations
dnl -malign-double -fschedule-insns2 -mwide-multiply
dnl
dnl optimization flags for pentium pro
dnl CFLAGS = -s -O3 -fomit-frame-pointer -Wall
dnl -mpentiumpro -march=pentiumpro
dnl -malign-functions=4 -funroll-loops -fexpensive-optimizations
dnl -malign-double -fschedule-insns2 -mwide-multiply
dnl
dnl ### CFLAGS="${CFLAGS} --no-rtti ${RPM_OPT_FLAGS}"
dnl ### CXXFLAGS="${CXXFLAGS} --no-rtti ${RPM_OPT_FLAGS}"
dnl
dnl now create our libtool, the earlier the better...
dnl AM_PROG_LIBTOOL

dnl CXXFLAGS="$(CXXFLAGS) -Wall -g -fcheck-memory-usage \
dnl   -g -ansi  -U__i486__ -U__i586__ -U__i686__ -DMEMCHECK -D_REENTRANT -D_XOPEN_SOURCE -D_BSD_SOURCE \
dnl   -Wbad-function-cast -Wcast-align -Wundef -Wconversion -fno-exceptions \
dnl   -fcheck-new -Wall -pedantic -W -Wpointer-arith -Wmissing-prototypes \
dnl   -Wwrite-strings -Wno-long-long -Wnon-virtual-dtor -fno-builtin "

dnl Checks for typedefs, structures, and compiler characteristics.
AC_HEADER_TIME

dnl check if the compiler has bool
AC_CHECK_BOOL
dnl check if the system needs some #defines
AC_CHECK_GNU_EXTENSIONS

dnl check if the c++ compiler is new enough to support references to functions
AC_MSG_CHECKING(whether $CXX supports references to functions)
AC_TRY_CPP([#include <sys/resource.h>
,
    typedef int(function_t)(int);
    class dummy {
    public:
        function_t &function(int index);
    };]
,
AC_MSG_RESULT(yes)
,AC_MSG_ERROR(FAILED! please get a newer C++ compiler))

AC_TYPE_SIZE_T
AC_CHECK_SIZEOF(char,1)
AC_CHECK_SIZEOF(short,2)
AC_CHECK_SIZEOF(int,4)
if test $ac_cv_sizeof_char != 1 ; then
	AC_MSG_WARN([******************************************************************])
	AC_MSG_WARN([*** sizeof (char) != 1.                                            ])
	AC_MSG_WARN([******************************************************************])
fi
if test $ac_cv_sizeof_short != 2 ; then
	AC_MSG_WARN([******************************************************************])
	AC_MSG_WARN([*** sizeof (short) != 2.                                          ])
	AC_MSG_WARN([******************************************************************])
fi
if test $ac_cv_sizeof_int != 4 ; then
	AC_MSG_WARN([******************************************************************])
	AC_MSG_WARN([*** sizeof (int) != 4.                                            ])
	AC_MSG_WARN([******************************************************************])
fi

dnl check for dirent.h
AC_HEADER_DIRENT

dnl check for other stdc headers. More traditional ;)
AC_HEADER_STDC

dnl we should have a file from which we can guess the KDE version
KDE_CHECK_HEADER(kdeversion.h, AC_DEFINE(HAVE_KDEVERSION_H))

dnl name mangling would be fine, but not necessary
AC_CHECK_HEADER(demangle.h, AC_DEFINE(HAVE_DEMANGLE_H))

dnl rtti/type info woulf be fine for debugging
AC_CHECK_HEADERS(typeinfo)

dnl check for multithreading support
AC_CHECK_HEADER(pthread.h,,AC_MSG_ERROR(""
"    "
"    your system lacks support for posix threads."
"    please install a current version of gnu libc !"
"    "))

dnl AC_CHECK_HEADERS(utility string,,AC_MSG_ERROR(""
dnl "    "
dnl "    your system seems to lack support for one or more STL classes."
dnl "    please install a current version of the libgpp package"
dnl "    that contains the necessary C++ header files!"
dnl "    "))

AC_CHECK_HEADERS( assert.h byteswap.h ctype.h dlfcn.h endian.h errno.h \
	fcntl.h features.h float.h limits.h sched.h stdarg.h stddef.h \
	stdio.h stdlib.h string.h sys/ioctl.h sys/param.h limits.h \
	sys/time.h sys/types.h time.h unistd.h,,AC_MSG_ERROR(""
"    "
"    your system seems to lack one or more needed header files."
"    please make sure you have all necessary developer packages"
"    installed or that the header files are present on your system!"
"    "))

dnl Check for memory info and see if we can determine
dnl the total amount of installed memory
AC_MSG_CHECKING(for memory info)
AC_TRY_CPP([
#include <sys/sysinfo.h>
#include <linux/kernel.h>
,
    struct sysinfo info;
    unsigned int total;
    sysinfo(&info);
    total = info.totalram;
],
AC_DEFINE(HAVE_MEMINFO)
AC_MSG_RESULT(present)
,AC_MSG_WARN(FAILED!

!!! You might get inaccurate behaviour of the memory management !!!

))

dnl check for resource query functions
AC_MSG_CHECKING(for resource usage)
AC_TRY_CPP([
#include <sys/resource.h>
,
    struct rlimit limit;
    getrlimit(RLIMIT_DATA, &limit);
    unsigned int ulimit = limit.rlim_cur >> 20;
    getrlimit(RLIMIT_AS, &limit);
],
AC_DEFINE(HAVE_GETRLIMIT)
AC_MSG_RESULT(present)
,AC_MSG_WARN(MISSING!))

AC_CHECK_FUNC(geteuid, AC_DEFINE(HAVE_GETEUID))
AC_CHECK_FUNC(mkstemp, AC_DEFINE(HAVE_MKSTEMP))
AC_CHECK_FUNC(unlink,  AC_DEFINE(HAVE_UNLINK))

dnl get the correct aRts include directories...
AC_MSG_CHECKING(for aRts includes)
ac_arts_inc1="-I`$ARTSCCONFIG --arts-prefix | $SED s./\$..g`/include"
ac_arts_inc2="-I`$ARTSCCONFIG --arts-prefix | $SED s./\$..g`/include/arts"
ac_arts_inc3="`${ARTSCCONFIG} --cflags      | $SED s./\$..g`"
ac_arts_inc4="`${ARTSCCONFIG} --cflags      | $SED s./\$..g | $SED s/artsc/arts/g `"

dnl ...concatenate and eliminate duplicate entries...
eval "ac_arts_includes=\"`echo -en ${ac_arts_inc1}\\\n${ac_arts_inc2}\\\n${ac_arts_inc3}\\\n${ac_arts_inc4} | $SED s.//./.g  | $SORT | $UNIQ`\""
eval "ARTS_INCLUDES=\"`for dir in \`echo $ac_arts_includes\`; do { echo -n $dir " "; }; done `\""
AC_MSG_RESULT(${ARTS_INCLUDES})
AC_SUBST(ARTS_INCLUDES)

dnl ...and check that the aRts headers are found from them
arts_check_saved_cppflags="$CPPFLAGS"
CPPFLAGS="$ARTS_INCLUDES $CPPFLAGS"
AC_CHECK_HEADERS( artsflow.idl artsc.h, [arts_headers_found=1], [
  AC_MSG_ERROR( ARTS headers not found - can't compile. )
])
CPPFLAGS="$arts_check_saved_cppflags";


dnl Checks for libraries.

AC_CHECK_LIB(compat, main, [LIBCOMPAT="-lcompat"]) dnl for FreeBSD
AC_SUBST(LIBCOMPAT)

dnl not usable yet :-(
dnl AC_CHECK_LIB(audiofile, main, [LIBAUDIOFILE="-laudiofile"])
dnl AC_SUBST(LIBAUDIOFILE)

dnl output files
topdir=`pwd`
AC_SUBST(topdir)

dnl get the fields of the spec file from the lsm file

define(getlsm, $1=`bin/get_lsm_entry.sh kwave.lsm $2`)

getlsm(RPM_DESCRIPTION, Description)
getlsm(RPM_SUMMARY, Keywords)
getlsm(RPM_NAME, Title)
getlsm(RPM_COPYRIGHT, Copying-policy)
getlsm(RPM_URL, Homepage)
dnl getlsm(RPM_VENDOR, Author)
RPM_VENDOR="Thomas Eschenbacher <Thomas.Eschenbacher@gmx.de>"

changequote(<<, >>)
RPM_VERSION=`cat ./VERSION | awk '{ split($0, a, "-") } END { print a[1] }'`
RPM_RELEASE=`cat ./VERSION | awk '{ split($0, a, "-") } END { print a[2]+0 }'`
RPM_GROUP=<<X11/Applications/Sound>>
RPM_BUILDROOT=<</tmp/kwave-%{version}.root>>
LD_VERSION_INFO=<<`cat ./VERSION | awk '{split($0, a, ".")} \
	{relpos=index(a[3],"-")} \
	{rel=relpos==0 ? a[3] : substr(a[3], 1, relpos-1)} \
END	{printf("%d:%d:%d", a[1]+a[2], rel, a[2]) }'`>>
changequote([, ])

dnl enter the variables for the spec file
AC_SUBST(RPM_DESCRIPTION)
AC_SUBST(RPM_SUMMARY)
AC_SUBST(RPM_NAME)
AC_SUBST(RPM_VERSION)
AC_SUBST(RPM_RELEASE)
AC_SUBST(RPM_GROUP)
AC_SUBST(RPM_COPYRIGHT)
AC_SUBST(RPM_URL)
AC_SUBST(RPM_VENDOR)
AC_SUBST(RPM_BUILDROOT)
AC_SUBST(LD_VERSION_INFO)

dnl add here all your Makefiles
dnl      (Makefile libaudiofile/Makefile libaudiofile/modules/Makefile mt/Makefile libkwave/Makefile libgui/Makefile kwave/Makefile plugins/Makefile plugins/common/Makefile po/Makefile doxy.cfg doc/Makefile kwave.spec)
AC_OUTPUT(Makefile libaudiofile/Makefile libaudiofile/modules/Makefile mt/Makefile libkwave/Makefile libgui/Makefile kwave/Makefile plugins/Makefile plugins/common/Makefile po/Makefile doxy.cfg doc/Makefile kwave.spec)
